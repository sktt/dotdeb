call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/goyo.vim'
  Plug 'mattn/webapi-vim'
  Plug 'mattn/gist-vim'
  Plug 'tpope/vim-obsession'

  Plug 'nanotech/jellybeans.vim'

  " Navigation
  Plug 'jlanzarotta/bufexplorer'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

  " ./install.py --clangd-completer --rust-completer --go-completer --ts-completer
  Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --go-completer --clangd-completer --clang-tidy --ts-completer --ninja' }
  " Formating and editing
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'scrooloose/nerdcommenter'
  Plug 'godlygeek/tabular'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'embear/vim-localvimrc'
  " Plug 'lervag/vimtex'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'mileszs/ack.vim'

  " Linting
  Plug 'dense-analysis/ale'
  " UI Plugins
  Plug 'preservim/nerdtree'
  Plug 'ryanoasis/vim-devicons'

  " Syntax highlighting
  Plug 'Shirk/vim-gas'
  Plug 'sheerun/vim-polyglot'

  Plug 'vhda/verilog_systemverilog.vim'

call plug#end()

" remove all gui stuff from gvim
set go=
set guifont=PragmataPro\ Liga\ 14

set rtp+=/usr/bin/fzf

set clipboard=unnamedplus
" noremap x "1x but im using x+p alot so..
set timeoutlen=100 ttimeoutlen=0


" read inline per file config
set modeline

" let g:spellfile_URL='http://ftp.vim.org/vim/runtime/spell'
let g:tex_comment_nospell = 1
let g:localvimrc_ask = 0
let g:github_user = 'sktt'
let g:ycm_confirm_extra_conf = '0'
let g:ycm_clangd_args = ['-log=verbose', '-pretty', '-enable-config']
let g:ycm_min_num_of_chars_for_completion = 4
let g:yats_host_keyword = 1
autocmd BufWinEnter quickfix set nowrap!

let g:clang_library_path='/usr/lib/llvm-7/lib'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Opening a new split will make all open splits equal w/h
set equalalways

" Enable filetype plugins
filetype plugin indent on

" Set to auto read when a file is changed from the outside
set autoread
autocmd FocusGained,BufEnter * silent! checktime

" Dont put temp junk in the file directory
set backupdir=~/.vim/backup,~/.vim/tmp
set directory=~/.vim/backup,~/.vim/tmp

" Enable mouse scrolling, clicks etc
set mouse=a

" Leader key mapping and timeout
nnoremap <c-s> :w<CR>
nnoremap <Space> <Nop>
nnoremap <F5> "=strftime('%F')<cr>p
inoremap <F5> <c-o>"=strftime('%F')<cr>p
nnoremap j gj
nnoremap k gk
set timeoutlen=400
set ttimeoutlen=400
let mapleader = " "
nnoremap <Leader>e :e %:h/%:t:r.

set relativenumber

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" nmap <Leader>bb :enew<cr>

" nmap <M-j> <Plug>(ale_next_wrap)
" nmap <M-k> <Plug>(ale_previous_wrap)

" execute "set <M-h>=h"
" execute "set <M-l>=l"
" Move to the next buffer
nmap <S-l> :bnext<CR>

" Move to the previous buffer
nmap <S-h> :bprevious<CR>

execute "set <M-1>=1"
execute "set <M-2>=2"
execute "set <M-3>=3"
execute "set <M-4>=4"
execute "set <M-5>=5"
execute "set <M-6>=6"
execute "set <M-7>=7"
execute "set <M-8>=8"
execute "set <M-9>=9"
noremap <M-1> :b1<CR>
noremap <M-2> :b2<CR>
noremap <M-3> :b3<CR>
noremap <M-4> :b4<CR>
noremap <M-5> :b5<CR>
noremap <M-6> :b6<CR>
noremap <M-7> :b7<CR>
noremap <M-8> :b8<CR>
noremap <M-9> :b9<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <Leader>x :bd<CR>

" Show all open buffers and their status
" nnoremap gb :ls<CR>:buffer<Space>
nnoremap gb :BufExplorer<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing text
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Backspace removes everything on the line.
set backspace=eol,indent,start

" Linebreak on 120 characters
set lbr
set textwidth=80

" format paragraph
nnoremap <Leader>q gqap

" quickfix window
nnoremap <Leader>co :copen 4<CR>
nnoremap <Leader>d :cclose <CR>

nnoremap <Leader>] :cn<CR>
nnoremap <Leader>[ :cp<CR>

" Default indention style
set tabstop=4
set softtabstop=2
set shiftwidth=2
set expandtab "tab -> spaces. `C-V <Tab>` for normal tab
set shiftround "Round indent to nearest shiftwidth multiple
" set foldmethod=syntax

nnoremap <Leader>bl :BufExplorer<CR>
let g:bufExplorerDefaultHelp=0       " Do not show default help.
" nnoremap <leader>jd :ALEGoToDefinition<CR>
" nnoremap <leader>jf :ALEFindReferences<CR>

nnoremap <leader>jd :YcmCompleter GoTo<CR>
nnoremap <leader>ji :YcmCompleter GoToImplementation<CR>
nnoremap <leader>jt :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>
nnoremap <leader>fi :YcmCompleter FixIt<CR>

" Makefiles need tabs
autocmd FileType make setlocal noexpandtab
autocmd FileType tex setlocal spell spelllang=en_us
autocmd FileType plaintex setlocal spell spelllang=en_us

" show vertical marker at textwidth+1
set colorcolumn=+1
highlight ColorColumn guibg=#303030

" Textfiles dont need newlines.
autocmd FileType markdown set nowrap!
autocmd FileType tex set nowrap!

" Tabularize macros
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search while typing
set incsearch

noremap <Leader>l :set list!<CR> " Toggle invisible chars$"

" Open folded lines when searching
"set foldopen

" Toggle highlight search results
nnoremap <Leader>h :set hlsearch!<CR>

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7


if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
" if filereadable(expand("~/.vimrc_background"))
  " let base16colorspace=256
"   source ~/.vimrc_background
" endif

" set t_Co=256
set background=dark
" colorscheme material-theme
" colorscheme vividchalk
" colorscheme synthwave84
" colorscheme PaperColor
colorscheme jellybeans

"hi Normal ctermbg=none

" show row numbers
set number

" Don't wrap lines
set nowrap

" Use syntax highlighting
syntax on

" Show guide lines
autocmd WinLeave * set nocursorline nocursorcolumn
autocmd WinEnter * set cursorline cursorcolumn
" set cursorline cursorcolumn

" No annoying sound on errors
set noerrorbells
set novisualbell!
set t_vb=
set tm=500


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" -> indentLine
"let g:indentLine_char = 'Â¦'
"let g:indentLine_color_term = 234
"let g:ale_fixers = {
"\   'javascript': [
"\       'eslint',
"\   ],
"\}
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['typescript'] = ['prettier']
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0

" let g:ale_linters = {'c': [exepath('clang-tidy')], 'cpp': []  }
let g:ale_linters = {'c': [], 'cpp': [], 'python': ['pyflakes']  }


" let g:ale_completion_enabled = 1
" set omnifunc=ale#completion#OmniFunc
" let g:e_linters = {'c': 'gcc'}
" let g:ale_linters = {
" \   'javascript': ['eslint'],
" \}
let g:ale_javascript_eslint_executable='npx eslint'
let g:ale_fix_on_save = 1

let g:javascript_conceal_function             = "Æ’"
let g:javascript_conceal_null                 = "Ã¸"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "â‡š"
let g:javascript_conceal_undefined            = "Â¿"
let g:javascript_conceal_NaN                  = "â„•"
let g:javascript_conceal_prototype            = "Â¶"
let g:javascript_conceal_static               = "â€¢"
let g:javascript_conceal_super                = "Î©"
let g:javascript_conceal_arrow_function       = "â‡’"
let g:javascript_conceal_noarg_arrow_function = "ðŸž…"
let g:javascript_conceal_underscore_arrow_function = "ðŸž…"
set conceallevel=2
let g:javascript_plugin_jsdoc = 1
" -> ctrlp.vim
"
" Set ignore patterns
" let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\'
nnoremap <C-p> :<C-u>FZF<CR>
" Use command-t mapping
nnoremap <Leader>t :<C-u>FZF<CR>

nnoremap <Leader>o :BufExplorer<CR>

" -> vim-coffe-script
" Treat litcoffee as coffee
autocmd FileType litcoffee runtime ftplugin/coffee.vim
autocmd FileType sh set tw=0
" autocmd FileType ts   setfiletype typescript
autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" -> vim-airline
"
" let g:airline_theme='hybrid'

" Enable tab bar
" let g:airline#extensions#tabline#enabled = 1

" Show just the filename
" let g:airline#extensions#tabline#fnamemod = ':t'

" Enable powerline fonts
" let g:airline_powerline_fonts = 1

" Show status bar
set laststatus=2

set ttymouse=xterm2

" -> NERDTree / NERDTreeTabs
" Open NERDTree in all tabs
let NERDTreeMinimalUI=1
nnoremap <Leader>n :NERDTreeToggle<CR>

" -> goyo.vim
" adjust magrins
let g:goyo_width = 80
let g:goyo_margin_top = 0
let g:goyo_margin_bottom = 0

" -> vim-gist
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

let g:UltiSnipsExpandTrigger="<c-x>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

let g:NERDTrimTrailingWhitespace = 1
let g:NERDUsePlaceHolders = 0
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'both'
let g:NERDCustomDelimiters = {
      \ 'wast': {'left': ';;', 'rightAlt': ';)', 'leftAlt': '(;'}
      \ }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Navigation and window management
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Resize split
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" Equal split size
nnoremap <Leader>= <c-W>=

" Navigation to splits
nnoremap <c-j> <c-W>j
nnoremap <c-k> <c-W>k
nnoremap <c-h> <c-W>h
nnoremap <c-l> <c-W>l

" neovim ^H fix.
" https://github.com/neovim/neovim/issues/2048
if has('nvim')
  nmap <BS> <C-W>h
endif

" Switch CWD to the directory of the open buffer
map <Leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
set viminfo^=%

nmap <F8> <Plug>(ale_detail)
nmap <F7> :YcmCompleter GetDoc<cr>
nmap <leader>f <plug>(YCMHover)
" execute "set <M-j>=j"
" execute "set <M-k>=k"
nmap <silent> <Leader>k <Plug>(ale_previous)
nmap <silent> <Leader>j <Plug>(ale_next)

autocmd WinEnter * if &previewwindow | set nowrap! | endif

" set wildignore=

" Next/prev result
nnoremap ]q :cnext<cr>
nnoremap [q :cprevious<cr>

" Autoclose preview scratch
autocmd CompleteDone * pclose

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc, marcros etc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable Ex mode
map Q <Nop>

" Reload vim config on save
autocmd! bufwritepost $MYVIMRC source %

" Save as root. crashes neovim
" command! WW execute ':silent w !sudo tee % > /dev/null' | edit! %

" Treat :Q as :q
command! Q q

" Quickly open config file
nmap <Leader>v :tabedit $MYVIMRC<CR>

" Search for visual selected section
vnoremap // "y/<C-R>"<CR>

" enable italic
set t_ZH=[3m
set t_ZR=[23m
highlight Comment cterm=italic

" highlight SpellBad cterm=underline guifg=red
" highlight SpellLocal cterm=underline guifg=orange
highlight SpellCap cterm=underline guifg=yellow
highlight SpellRare cterm=underline guifg=yellow

autocmd VimLeave * call system("xclip -o | xclip -selection c")

let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'
"let g:ack_autoclose = 1
let g:ack_use_cword_for_empty_search = 1
cnoreabbrev Ack Ack!
nnoremap <Leader>g :Ack!<Space>

syn region texComment   start="\\begin{comment}"    end="\\end{comment}"
